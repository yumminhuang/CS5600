             +--------------------------+
             |          CS 5600         |
             | PROJECT 2: USER PROGRAMS |
             |     DESIGN DOCUMENT      |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Borui Gu <borui@ccs.neu.edu>
Sanat Chugh <sanatc@ccs.neu.edu>
Yaming Huang <yummin@ccs.neu.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In this task, we don't declare new structure or static variables.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

In process_execute(), I use a strtok_r() to tokenize the input and read it in
a char array, filename and all the arguments. Then thread_create() will call
start_process() execute command. In start_process(), I read the file name and
all arguments from the char array, then save them in the stack.

strtok_r() tokenizes the input string and get arguments in order, so the
elements of argv[] are in the right order.

To avoid overflowing the stack page, first, when we push any argument to the
stack, we check the argument length is not larger than available space.
Second, we make boundary check to make sure each push of argv address does not
overflow the stack page.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok() has a static pointer to the last string which can cause problems if
two processes gets created and strtok() was called by one process when a switch
happens and the other one starts to call strtok() while the other process
wasn't finished. strtok_r() has a third argument which is a pointer to the
string that is supposed to be tokenized further on.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. It is much safer and simpler to use the Unix approach, because shell could
help check any unsafe command line before they arrive at kernel directly.
2. The Unix approach is more flexible. The command can support more complex
functions and semantics by adding arguments.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In syscall.c :
typedef int (*handler) (uint32_t, uint32_t, uint32_t);
static handler syscall_table[128];
We define a data type "handler" to build a table associating syscall
numbers to syscall handler functions

static struct lock lock1;
We use a lock to avoid racing conditions

In thread.h :
struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                 /* Thread identifier. */
    enum thread_status status; /* Thread state. */
    char name[16];             /* Name (for debugging purposes). */
    uint8_t *stack;            /* Saved stack pointer. */
    int priority;              /* Priority. */
    int64_t wake_time;         /* Tick when sleeping thread should be waked. */
    struct list_elem allelem;  /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;     /* List element. */

#ifdef USERPROG
    /* Shared between userprog/process.c and userprog/syscall.c. */
    uint32_t *pagedir;         /* Page directory. */
    struct thread *parent;     /* Parent process. */
    struct list opened_files;  /* Files opened by the process */
    int next_fd;               /* File descriptor for next file */
    struct file *image;        /* The image file on the disk. */
    struct semaphore wait;     /* Semaphore for process_wait. */
    int exit_status;           /* Exit status. */
#endif

    /* Owned by thread.c. */
    unsigned magic;            /* Detects stack overflow. */
  };
Add new members:
opened_files to describe files opened by the process
next_fd is the file descriptor for a new file opened by the process
...

struct file_fd
  {
    struct file * file;
    int fd;
    struct list_elem elem;
  };
Add a new struct file_fd to associate file descriptor with file

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

When a file is opened by a process, we create a new instance of file_fd,
initialize it with the file and its file descriptor, and add the file_fd
to opened_files list of the process.
File descriptors are unique just within a single process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

We check if the address is user address (essentially, if the address
is below PHYS_BASE), then dereference it. We modify page fault handler
page_fault() so that an invalid pointer will cause call to 
exit_handler() and the process will be terminated.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

System call wait() will call process_wait().

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

In syscall_handler(), we first check to ensure the addresses of
the system call number and the arguments are user virtual addresses. 
if any of these checks failed, we will call exit_handler() which will 
terminate the process and cleanup all temporarily allocated resources.

In a system call handler like write_handler() which needs to access an 
arbitrary amount of user memory, we first check if the addresses in
the buffer are user virtual addresses. If not, we will call 
exit_handler() which will do the cleanup.

A bad pointer will cause a page fault. We modify page_fault() that 
exit_handler() will be called and do the cleanup.

The strategy we adopted take advantage of code reuse, in which 
exit_handler() will terminate the process and care about cleanup
resources.

Example: A process calls system call for write, and an address in 
buffer is invalid. A page fault will occur, the page fault handler
will call exit_handler(), the process will be terminated and all
allocated resources are freed.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

Because it is suggested that in this way we can take advantage of the
processor's MMU, so it is normally faster and tends to be used in real
kernels.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Advantages:
We use a list to associate file descriptors to files. The number of
opened files is not limited, and memory space is allocated dynamically
so that we will not waste space when number of opened files is small.

Disadvantages:
There is an O(n) time complexity every time we try to find the associating
file from a given file descriptor.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We use default mapping.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
