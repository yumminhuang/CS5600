+--------------------+
|       CS 5600      |
| PROJECT 1: THREADS |
|   DESIGN DOCUMENT  |
+--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Borui Gu <borui@ccs.neu.edu>
Yaming Huang <yummin@ccs.neu.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

ALARM CLOCK
===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread {
    /* Owned by thread.c. */
    tid_t tid;                         /* Thread identifier. */
    enum thread_status status;         /* Thread state. */
    char name[16];                     /* Name (for debugging purposes). */
    uint8_t *stack;                    /* Saved stack pointer. */
    int priority;                      /* Priority. */
    int64_t wake_time;                 /* Tick when sleeping thread should be waked. */
    struct list_elem allelem;          /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;             /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                 /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                    /* Detects stack overflow. */
  };
Add a new member 'int64_t wake_time', which is the tick that the sleeping
thread should be wake up.

enum thread_status
  {
    THREAD_RUNNING,     /* Running thread. */
    THREAD_READY,       /* Not running but ready to run. */
    THREAD_BLOCKED,     /* Waiting for an event to trigger. */
    THREAD_DYING,       /* About to be destroyed. */
    THREAD_SLEEPING     /* Sleeping thread. */
  };
Add a new state 'THREAD_SLEEPING' that denotes a sleeping thread.

static struct list sleeping_list;
Add a new list 'sleeping_list', which is a list of sleeping threads.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

timer_sleep() will call a help function thread_sleep(), which will put current
thread into sleeping list, set status to THREAD_SLEEPING and set wake_time of
the thread. Then it will call schedule() to let CPU run another thread, while
this thread will sleep the given ticks. Every time the system calls
schedule(), it will check is there any thread need to be wake up.
Interrupts are off during that process to avoid race conditions.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

We use a sorted list to store sleeping threads in ascending order of wake_time.
The timer interrupt handler can find the thread with minimum wake_time in O(1).

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

The interrupts are turned off in thread_sleep(),
which is called during a call to timer_sleep().

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

The system turns off the interrupts in thread_sleep(),
which is called during a call to timer_sleep().

---- RATIONALE ----

>> A6: Why did you choose this design? In what ways is it superior to
>> another design you considered?
Follow the hints provided by Professor Wilson.

PRIORITY SCHEDULING
===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#define DONATION_LEVEL 8      /* Limit on depth of nested priority donation. */
We impose a limit on depth of nested priority donation.


struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                         /* Thread identifier. */
    enum thread_status status;         /* Thread state. */
    char name[16];                     /* Name (for debugging purposes). */
    uint8_t *stack;                    /* Saved stack pointer. */
    int priority;                      /* Priority. */
    int64_t wake_time;                 /* Tick when sleeping thread should be waked. */
    struct list_elem allelem;          /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;             /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                 /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                    /* Detects stack overflow. */

    int old_priorities[DONATION_LEVEL];
    struct thread * accepter;          /* Thread that received the donation. */
  };
Add a new member 'int old_priorities[DONATION_LEVEL]', which records the
priority of this thread before it receive a priority donation.
Add a new member 'struct thread * accepter', which is the thread that received
priority donation from this thread.


>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

Each thread has an integer array('old_priorities[DONATION_LEVEL]')
which saves previous priorities that was received before a new
donation.
Each thread that donates it's priority saves the accepter of the priority in
it's pointer to that thread('accepter').

+-------------+            +-------------+           +-------------+
|  Thread 1   | donate     |  Thread 2   | donate    |  Thread 3   |
| priority=50 | priority   | priority=50 | priority  | priority=50 |
|             |<-----------+             |<----------+             |
|old priority | accepter   |old priority | accepter  |             |
|=[30, 40]    |            |=[40]        |           |             |
|             |            |             |           |             |
+------+------+      +-----+------+------+     +-----+-------------+
       |             |            |            |
       |             |            |            |
 Hold  |   +---------+      Hold  |  +---------+
       |   | try acquire          |  | try acquire
       v   v                      v  v
  +---------+               +---------+
  |  Lock 1 |               |  Lock 2 |
  +---------+               +---------+

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

Traverse the thread list to find the thread with the highest priority.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

A lock was held by a thread with a lower priority, then a thread with a
higher priority try to acquire the lock. This scenario will cause a priority
donation.

The system will track all threads by the pointer that points to donation
accepter and change their priorities.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

lock_release() will call sema_up(). sema_up() has a reverse process of
priority donation. If the thread that wakes up from the waiters has an
entry in its accepter pointer, we compare it against the current thread,
since this is the thread he must have donated his priority to.
We check whether the current thread has the same priority of waking up
threads. If it is the same, we find the maximum value on the current threads
old priorities and assign it to the current thread. Otherwise the priority
of the waking up thread must be in the old priorities of the current thread
and we simply delete it from that list. Then set the accepter pointer of the
waking up thread as NULL and call thread yield.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

A race condition can happen if the check for donation for the threads returns
false, then it is allowed to set a new priority immediatly, but before the new
priority is set and after the check for priority donation a interrupt occurs.
If it leads to a donation to this thread and lowers it's priority immediatly
after the donation, a race may occur. To avoid this potential race, the
interrupts are turned off. So a race condition can't happen.

Theoretically, We can lock the operation of setting priority to avoid this
race condition.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We add only two members in the thread structure, which is easy to implement and
understand. We use an integer array to save old prioritis to handle nested
donation.

SURVEY QUESTIONS
================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the two problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Since Professor Wilson provided some hints on class, it's quite easy to
solve the first problem. However, we still took some time to solve the second
problem.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Yes. The project 1 help me understand how thread scheduling and lock works.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

Perhaps you should point out that the code you gave on the project 1 slide
is not the whole solution.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

No.

>> Any other comments?

No.

