+--------------------+
|       CS 5600      |
| PROJECT 1: THREADS |
|   DESIGN DOCUMENT  |
+--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Borui Gu <@ccs.neu.edu>
Yaming Huang <yummin@ccs.neu.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

ALARM CLOCK
===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread {
    /* Owned by thread.c. */
    tid_t tid;                         /* Thread identifier. */
    enum thread_status status;         /* Thread state. */
    char name[16];                     /* Name (for debugging purposes). */
    uint8_t *stack;                    /* Saved stack pointer. */
    int priority;                      /* Priority. */
    int64_t wake_time;                 /* Ticks before wake sleeping thread. */
    struct list_elem allelem;          /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;             /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                 /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                    /* Detects stack overflow. */
  };
Add a new member 'int64_t wake_time', which is ticks before waking the sleeping
thread.

enum thread_status
  {
    THREAD_RUNNING,     /* Running thread. */
    THREAD_READY,       /* Not running but ready to run. */
    THREAD_BLOCKED,     /* Waiting for an event to trigger. */
    THREAD_DYING,       /* About to be destroyed. */
    THREAD_SLEEPING     /* Sleeping thread. */
  };
Add a new state 'THREAD_SLEEPING' that denotes a sleeping thread.

static struct list sleeping_list;
Add a new list 'sleeping_list', which is a list of sleeping threads.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

When system call timer_sleep(), system will put current thread into sleeping
list, then this thread will sleep the given ticks.
Every time the system calls schedule(), it will check is there any thread
need to be wake up.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

We use a sorted list to store sleeping threads in ascending order. The timer
interrupt handler can find the thread with minimum wake_time in O(1).

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

---- RATIONALE ----

>> A6: Why did you choose this design? In what ways is it superior to
>> another design you considered?

PRIORITY SCHEDULING
===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#define DONATION_LEVEL 8      /* Limit on depth of nested priority donation. */
We impose a limit on depth of nested priority donation.

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                         /* Thread identifier. */
    enum thread_status status;         /* Thread state. */
    char name[16];                     /* Name (for debugging purposes). */
    uint8_t *stack;                    /* Saved stack pointer. */
    int priority;                      /* Priority. */
    int64_t wake_time;                 /* Ticks before wake sleeping thread. */
    struct list_elem allelem;          /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;             /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                 /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                    /* Detects stack overflow. */

    int old_priorities[DONATION_LEVEL];
    struct thread * accepter;          /* Thread that received the donation. */
  };
  Add a new member 'int old_priorities[DONATION_LEVEL]'
  Add a new member 'struct thread * accepter', which is the thread that receive
  a priority donation.


>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

SURVEY QUESTIONS
================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the two problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
